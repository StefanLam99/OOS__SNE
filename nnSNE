from time import time
import numpy as np
from tensorflow import keras
from utils import blockPrint, enablePrint
from tSNE import cond_probs, joint_average_P, joint_Q, pca
from autoencoder import *
from keras.models import load_model
from utils import plot, make_dir
from RBM import *
from datasets import Dataset
from  neural_tSNE import *
from neuralREG_tsne import *

# initialization dataset/model
seed = 0
dataset = Dataset(seed)
model_type = 'reg' # par/reg/auto/PCA/kernel
data_name = 'MNIST' # MNIST/ COIL20
if data_name == 'COIL20':
    n_train = 960
    n_test = 480
    batch_size = 480
elif data_name == 'MNIST':
    n_train = 10000
    n_test = 5000
    batch_size = 1000
d_components = 10
train_RBM = False
train_NN = True
show_plot = False
epochs = 50
X, y , X_train, y_train, X_test, y_test = dataset.get_data(name=data_name, n_train=n_train, n_test=n_test)


# hyperparameters
labdas = [0.1] #[0.1, 0.3, 0.5, 0.7, 0.9, 0.99]
c = 0.1

# training RBM

file_path_weights = 'Models/weightsRBM/' + data_name + '/' + data_name + str(n_train) + 'dim' + str(d_components)
if data_name == 'MNIST':
    layer_dim = [784, 500, 500, 2000, d_components]
elif data_name == 'COIL20':
    layer_dim = [1024, 500, 500, 2000, d_components]

if train_RBM:
    make_dir(file_path_weights)
    RBM = Autoencoder(layer_dims=layer_dim)
    RBM.pretrain(X_train.T, epochs=10)
    RBM.save(file_path_weights)

# training neural network
model = None
file_path_NN = None
if model_type == 'par':
    file_path_NN = 'Models/parametric/' + data_name + str(n_train) + model_type + 'dim' + str(d_components)
    model = neural_tSNE(epochs=epochs, batch_size=batch_size, lr=0.01)
    model.load_RBM(file_path_weights, layer_dim)
elif model_type == 'auto':
    file_path_NN = 'Models/autoencoder/' + data_name + str(n_train) + model_type + 'dim' + str(d_components)
    model = neuralREG_tSNE(epochs=epochs, batch_size=batch_size, lr=0.01, labda=0)
    model.load_RBM(file_path_weights, layer_dim)

lambdas = [-1]
models = [model]
file_paths = [file_path_NN]

if model_type == 'reg':
    models = []
    file_paths = []
    lambdas = labdas
    for labda in lambdas:
        file_path_NN = 'Models/regularized/' + data_name + str(n_train) + model_type + 'dim' + str(d_components) + '_' +str(labda)
        file_paths.append(file_path_NN)
        model = neuralREG_tSNE(epochs=epochs, batch_size=batch_size, lr=0.01, labda=labda)
        model.load_RBM(file_path_weights, layer_dim)
        models.append(model)

if train_NN:
    for i, labda in enumerate(lambdas):
        model = models[i]
        losses = model.train(X_train)
        model.save(file_paths[i])
        np.savetxt(file_paths[i] + 'losses.csv', losses, delimiter=',')


if show_plot:
    for i, labda in enumerate(lambdas):
        models[i].load_model(file_paths[i])
        Y_train = models[i].predict(X_train)
        Y_test = models[i].predict(X_test)
        if data_name == 'MNIST' and d_components==2:
            plot(Y_train, y_train, s=1, linewidth=0.2,cmap='Paired', title= 'MNIST train ' +str(n_train)+' ' +model_type+ ' labda = ' + str(labda))
            plot(Y_test, y_test, s=1, linewidth=0.2, cmap='Paired', title='MNIST test ' + str(n_test)+' ' +model_type+ ' labda = ' + str(labda))
        elif data_name == 'COIL20' and d_components==2:
            plot(Y_train, y_train, s=1, linewidth=0.2, cmap='gist_rainbow', title='COIL20 train ' + str(n_train)+' ' +model_type+ ' labda = ' + str(labda))
            plot(Y_test, y_test, s=1, linewidth=0.2, cmap='gist_rainbow', title='COIL20 test ' + str(n_test)+' ' +model_type+ ' labda = ' + str(labda))

